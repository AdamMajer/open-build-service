.d-inline-flex
  %i.fas.fa-lg.fa-comment.text-dark{ title: 'Comment' }
  = helpers.image_tag_for(comment.user, size: 35, custom_class: 'rounded-circle bg-light border border-gray-400 avatars-counter')
  %p
    = link_to(helpers.realname_with_login(comment.user), user_path(comment.user))
    wrote
    = link_to("#comment-#{comment.id}", title: l(comment.created_at.utc), name: "comment-#{comment.id}") do
      = render TimeComponent.new(time: comment.created_at)
.timeline-item-comment.mb-4
  .comment-bubble
    - if policy(comment).update? || policy(comment).destroy?
      .dropdown.dropleft.float-end
        = link_to('#', role: 'button', 'data-bs-toggle': 'dropdown', 'aria-expanded': 'false', class: 'text-dark') do
          %i.fas.fa-ellipsis
        .dropdown-menu
          - if policy(comment).update?
            = link_to("#edit_form_of_#{comment.id}", id: "edit_button_of_#{comment.id}", 'data-bs-toggle': 'collapse',
                      class: 'dropdown-item collapsed') do
              Edit
          - if policy(comment).destroy?
            = link_to('#', data: { 'bs-toggle': 'modal',
                                   'bs-target': '#delete-comment-modal',
                                   confirmation_text: 'Please confirm deletion of comment',
                                   action: comment_path(comment) },
                           class: 'dropdown-item delete_link', title: 'Delete comment') do
              Delete

    = helpers.render_as_markdown(comment)

    - if policy(comment).update?
      .collapse{ id: "edit_form_of_#{comment.id}" }
        = render(partial: 'webui/comment/comment_field', locals: { form_method: :put,
         comment: comment, commentable: commentable, element_suffix: "edit_#{comment.id}", has_cancel: true })

  -# This should be refactored to avoid relying on global state
  - if User.session # rubocop:disable ViewComponent/AvoidGlobalState
    .mb-2
      = link_to("#reply_form_of_#{comment.id}", id: "reply_button_of_#{comment.id}", 'data-bs-toggle': 'collapse',
                class: 'font-italic small collapsed') do
        Reply
      .collapse{ id: "reply_form_of_#{comment.id}" }
        = render(partial: 'webui/comment/comment_field', locals: { form_method: :post,
         comment: comment.children.new, commentable: commentable, element_suffix: "reply_for_#{comment.id}", has_cancel: true })

  - if level <= 3
    - comment.children.includes(:user).each do |children|
      = render BsRequestCommentComponent.new(comment: children, level: level + 1, commentable: commentable)

- if level > 3
  - comment.children.includes(:user).each do |children|
    = render BsRequestCommentComponent.new(comment: children, level: level + 1, commentable: commentable)
